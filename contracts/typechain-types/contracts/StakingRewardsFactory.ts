/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface StakingRewardsFactoryInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "allStakingRewards"
      | "allStakingRewardsLength"
      | "create"
      | "defaultRewardsDuration"
      | "owner"
      | "rewardsToken"
      | "setDefaultRewardsDuration"
      | "setOwner"
      | "stakingRewardsByStakingToken"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "Created"
      | "DefaultDurationUpdated"
      | "OwnerUpdated"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "allStakingRewards",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "allStakingRewardsLength",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "create",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "defaultRewardsDuration",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "rewardsToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setDefaultRewardsDuration",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setOwner",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "stakingRewardsByStakingToken",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "allStakingRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "allStakingRewardsLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "create", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "defaultRewardsDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "rewardsToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDefaultRewardsDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setOwner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "stakingRewardsByStakingToken",
    data: BytesLike
  ): Result;
}

export namespace CreatedEvent {
  export type InputTuple = [
    stakingToken: AddressLike,
    stakingRewards: AddressLike
  ];
  export type OutputTuple = [stakingToken: string, stakingRewards: string];
  export interface OutputObject {
    stakingToken: string;
    stakingRewards: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DefaultDurationUpdatedEvent {
  export type InputTuple = [duration: BigNumberish];
  export type OutputTuple = [duration: bigint];
  export interface OutputObject {
    duration: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnerUpdatedEvent {
  export type InputTuple = [owner: AddressLike];
  export type OutputTuple = [owner: string];
  export interface OutputObject {
    owner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface StakingRewardsFactory extends BaseContract {
  connect(runner?: ContractRunner | null): StakingRewardsFactory;
  waitForDeployment(): Promise<this>;

  interface: StakingRewardsFactoryInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  allStakingRewards: TypedContractMethod<
    [arg0: BigNumberish],
    [string],
    "view"
  >;

  allStakingRewardsLength: TypedContractMethod<[], [bigint], "view">;

  create: TypedContractMethod<
    [stakingToken: AddressLike, rewardsDistribution: AddressLike],
    [string],
    "nonpayable"
  >;

  defaultRewardsDuration: TypedContractMethod<[], [bigint], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  rewardsToken: TypedContractMethod<[], [string], "view">;

  setDefaultRewardsDuration: TypedContractMethod<
    [_seconds: BigNumberish],
    [void],
    "nonpayable"
  >;

  setOwner: TypedContractMethod<[_owner: AddressLike], [void], "nonpayable">;

  stakingRewardsByStakingToken: TypedContractMethod<
    [arg0: AddressLike],
    [string],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "allStakingRewards"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "allStakingRewardsLength"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "create"
  ): TypedContractMethod<
    [stakingToken: AddressLike, rewardsDistribution: AddressLike],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "defaultRewardsDuration"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "rewardsToken"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "setDefaultRewardsDuration"
  ): TypedContractMethod<[_seconds: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setOwner"
  ): TypedContractMethod<[_owner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "stakingRewardsByStakingToken"
  ): TypedContractMethod<[arg0: AddressLike], [string], "view">;

  getEvent(
    key: "Created"
  ): TypedContractEvent<
    CreatedEvent.InputTuple,
    CreatedEvent.OutputTuple,
    CreatedEvent.OutputObject
  >;
  getEvent(
    key: "DefaultDurationUpdated"
  ): TypedContractEvent<
    DefaultDurationUpdatedEvent.InputTuple,
    DefaultDurationUpdatedEvent.OutputTuple,
    DefaultDurationUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "OwnerUpdated"
  ): TypedContractEvent<
    OwnerUpdatedEvent.InputTuple,
    OwnerUpdatedEvent.OutputTuple,
    OwnerUpdatedEvent.OutputObject
  >;

  filters: {
    "Created(address,address)": TypedContractEvent<
      CreatedEvent.InputTuple,
      CreatedEvent.OutputTuple,
      CreatedEvent.OutputObject
    >;
    Created: TypedContractEvent<
      CreatedEvent.InputTuple,
      CreatedEvent.OutputTuple,
      CreatedEvent.OutputObject
    >;

    "DefaultDurationUpdated(uint256)": TypedContractEvent<
      DefaultDurationUpdatedEvent.InputTuple,
      DefaultDurationUpdatedEvent.OutputTuple,
      DefaultDurationUpdatedEvent.OutputObject
    >;
    DefaultDurationUpdated: TypedContractEvent<
      DefaultDurationUpdatedEvent.InputTuple,
      DefaultDurationUpdatedEvent.OutputTuple,
      DefaultDurationUpdatedEvent.OutputObject
    >;

    "OwnerUpdated(address)": TypedContractEvent<
      OwnerUpdatedEvent.InputTuple,
      OwnerUpdatedEvent.OutputTuple,
      OwnerUpdatedEvent.OutputObject
    >;
    OwnerUpdated: TypedContractEvent<
      OwnerUpdatedEvent.InputTuple,
      OwnerUpdatedEvent.OutputTuple,
      OwnerUpdatedEvent.OutputObject
    >;
  };
}
